pool:
  vmImage: "Ubuntu 16.04"

# This is actually the build number format specifier
name: $(Date:yyyyMMdd)$(Rev:-r)

# Create intermediate variables based on variables set in Azure Devops
variables:
  imageName: "$(registryName)/$(serviceName):$(build.buildNumber)"
steps:
  # Build the image specified in current builds Devops variable
  - task: Docker@1
    displayName: "Build service image $(serviceName)"
    inputs:
      # useDefaultContext false makes it possible to specify buildContext
      useDefaultContext: false
      # Setting buildcontext to source of current service
      # This executes the Dockerfile with this as the working directory
      buildContext: "./$(sourceRoot)"
      # Have to specify path to dockerfile since multiple dockerfiles exist in repo
      dockerFile: "./$(sourceRoot)/Dockerfile-cloud"
      # Specify name and version of the final image
      imageName: "$(imageName)"

  # Log in to private container repository using pre-registered Service Principal
  - task: Docker@1
    displayName: "Log in to private container repository"
    inputs:
      # This is the name of a Azure Resource Manager Service Principal
      azureSubscriptionEndpoint: "NG Azure Microservice Poc"
      azureContainerRegistry: "$(registryName)"
      command: "login"

  - task: Docker@1
    displayName: "Push image"
    inputs:
      command: "push"
      imageName: "$(imageName)"

  # Task to copy api specification to artifact directory
  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(sourceroot)"
      contents: "api.swagger.json"
      targetFolder: $(Build.ArtifactStagingDirectory)
  # Task to publish artifact directory (making them available in deploy)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: specification
